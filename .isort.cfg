[settings]
# Imports to add consistently to every file. Useful for __future__ imports.
# Defaults to None.
#add_imports=from __future__ import absolute_import, division, print_function, unicode_literals, with_statement

# If set to true - for each multi-line import statement isort will dynamically
# change the import length to the one that produces the most balanced grid,
# while staying below the maximum import length defined.
balanced_wrapping=False

# If set to true - ensures that if a star import is present, nothing else is
# imported from that namespace.
combine_star=False

# The default section to place imports in, if their section can not be
# automatically determined.
#default_section=

# If set to true - imports will be sorted by their length instead of
# alphabetically.
length_sort=False

# An integer that represents the longest line-length you want a single import to
# take. Defaults to 80.
line_length=79

# forced_separate=django.contrib,django.utils

# If set to true - instead of wrapping multi-line from style imports, each
# import will be forced to display on its own line.
# force_single_line=False  # mutex with multi_line_output

# A comment to consistently place directly above future imports.
import_heading_future=Future

# A comment to consistently place directly above imports from the standard library.
import_heading_stdlib=Standard Library

# A comment to consistently place directly above thirdparty imports.
import_heading_thirdparty=Third Party

# A comment to consistently place directly above imports from the current
# project.
import_heading_firstparty=First Party

# A comment to consistently place directly above imports that start with '.'.
import_heading_localfolder=Local

# An integer that represents the number of spaces you would like to indent by or
# Tab to indent by a single tab.
indent='    '

# A list of imports that will be forced to display withing the first party
# category.
known_first_party=examples,metaopt

# A list of imports that will be forced to display withing the standard library
# category.
# known_standard_libary=std,std2

# A list of imports that will be forced to display withing the third party
# category.
known_third_party=windml

# An integer that represents how you want imports to be displayed if their long
# enough to span multiple lines. A full definition of all possible modes can be
# found in isort's README.
multi_line_output=2

# If set to true - isort will create separate sections withing "from" imports
# for CONSTANTS, Classes, and modules/functions.
order_by_type=True

# A list of files to skip sorting completely.
# skip=file3.py,file4.py

# A list of modules that you want to appear in their own separate section.
#forced_separate=file1.py,file2.py

# Forces a list of imports to the top of their respective section. This works
# well for handling the unfortunate cases of import dependencies that occur in
# many projects.
# force_to_top=file1.py,file2.py

# A list of files to never skip sorting.
#not_skip=

# If set to true - isort will only change a file in place if the resulting file
# has correct Python syntax. This defaults to false because it can only work if
# the version of code having it's imports sorted is running the same version of
# Python as isort itself.
atomic=True

# Forces a certain number of lines after the imports and before the first line
# of functional code. By default this is 2 lines if the first line of code is a
# class or function. Otherwise it's 1.
lines_after_imports=2

# If set to true - isort will combine as imports on the same line within for
# import statements. By default isort forces all as imports to display on their
# own lines.
combine_as_imports=False

# If set to true - isort will add imports even if the file specified is
# currently completely empty.
force_adds=False
